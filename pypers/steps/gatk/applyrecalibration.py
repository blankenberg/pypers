import os
import glob
from pypers.core.step import CmdLineStep


class ApplyRecalibration(CmdLineStep):
    spec = {
        "name": "ApplyRecalibration",
        "version": "2.3-9",
        "descr": [
            "Runs gatk vcf ApplyRecalibration,",
            "from recal and tranches files pre-generated by VariantRecalibrator"
        ],
        "args":
        {
            "inputs": [
                {
                    "name"      : "input_files",
                    "type"      : "file",
                    "descr"     : "input vcf files"
                },
                {
                    "name"      : "input_recal",
                    "type"      : "file",
                    "descr"     : "input recalibration file"
                },
                {
                    "name"      : "input_tranches",
                    "type"      : "file",
                    "descr"     : "input tranches file"
                },
                {
                    'name'  : 'ref_path',
                    'type'  : 'ref_genome',
                    'tool'  : 'gatk',
                    'descr' : 'path to the directory containing the reference genome'
                }
            ],
            "outputs": [
                {
                    "name"  : "output_file",
                    "type"  : "file",
                    "value" : "{{input_files}}.recal.vcf",
                    "descr" : "variant recal file",
                }
            ],
            "params" : [
                {
                    "name"     : "jvm_args",
                    "value"    : "-Xmx{{jvm_memory}}g -Djava.io.tmpdir={{output_dir}}",
                    "descr"    : "java virtual machine arguments",
                    "readonly" : True
                },
                {
                    'name'  : 'gatk_jar',
                    'type'  : 'file',
                    'value' : '/software/pypers/GATK/GenomeAnalysisTKLite-2.3-9-gdcdccbb/GenomeAnalysisTKLite.jar',
                    'descr' : 'gatk genome analyser jar file',
                    "readonly" : True
                },
                {
                    'name'  : 'filter_level',
                    'type'  : 'float',
                    'value' : 99.0,
                    'descr' : 'the filter_level param'
                },
                {
                    'name'  : 'mode',
                    'type'  : 'str',
                    'value' : 'SNP',
                    'descr' : 'the mode param'
                }
            ]
        },
        "cmd": [
            "/usr/bin/java {{jvm_args}} -jar {{gatk_jar}} ",
            "-T ApplyRecalibration -R {{ref_path}} ",
            "-input {{input_files}} -recalFile {{input_recal}} -tranchesFile {{input_tranches}} ",
            "-o {{output_file}} --ts_filter_level {{filter_level}}",
            "-mode {{mode}}"
        ],
        "requirements": {
            "memory": '8'
        }
    }

    def process(self):

        self.submit_cmd(self.render())
        if not os.path.exists(self.output_file):
            raise Exception("Output file not existing: %s" %self.output_file)
        else:
            self.log.info("Step %s successfully completed" % self.name)
